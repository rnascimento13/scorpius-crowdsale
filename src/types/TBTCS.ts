/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface TBTCSInterface extends ethers.utils.Interface {
  functions: {
    "_maxTxAmount()": FunctionFragment;
    "_maxWalletToken()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "approveMax(address)": FunctionFragment;
    "authorize(address)": FunctionFragment;
    "autoBuybackEnabled()": FunctionFragment;
    "autoBuybackMultiplier()": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "buyCooldownEnabled()": FunctionFragment;
    "claimDividend()": FunctionFragment;
    "clearBuybackMultiplier()": FunctionFragment;
    "cooldownEnabled(bool,uint8)": FunctionFragment;
    "cooldownTimerInterval()": FunctionFragment;
    "decimals()": FunctionFragment;
    "getCirculatingSupply()": FunctionFragment;
    "getLiquidityBacking(uint256)": FunctionFragment;
    "getMultipliedFee()": FunctionFragment;
    "getOwner()": FunctionFragment;
    "getTotalFee(bool)": FunctionFragment;
    "getUnpaidEarnings(address)": FunctionFragment;
    "isAuthorized(address)": FunctionFragment;
    "isOverLiquified(uint256,uint256)": FunctionFragment;
    "isOwner(address)": FunctionFragment;
    "launchedAt()": FunctionFragment;
    "manualSend()": FunctionFragment;
    "name()": FunctionFragment;
    "pair()": FunctionFragment;
    "router()": FunctionFragment;
    "setAutoBuybackSettings(bool,uint256,uint256,uint256,bool)": FunctionFragment;
    "setBuybackMultiplierSettings(uint256,uint256,uint256)": FunctionFragment;
    "setDistributionCriteria(uint256,uint256)": FunctionFragment;
    "setDistributorSettings(uint256)": FunctionFragment;
    "setFeeReceivers(address,address)": FunctionFragment;
    "setFees(uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "setIsDividendExempt(address,bool)": FunctionFragment;
    "setIsFeeExempt(address,bool)": FunctionFragment;
    "setIsTimelockExempt(address,bool)": FunctionFragment;
    "setIsTxLimitExempt(address,bool)": FunctionFragment;
    "setMaxWalletPercent(uint256)": FunctionFragment;
    "setSwapBackSettings(bool,uint256)": FunctionFragment;
    "setTargetLiquidity(uint256,uint256)": FunctionFragment;
    "setTxLimit(uint256)": FunctionFragment;
    "swapEnabled()": FunctionFragment;
    "swapThreshold()": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "tradingOpen()": FunctionFragment;
    "tradingStatus(bool)": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "triggerManualBuyback(uint256,bool)": FunctionFragment;
    "unauthorize(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "_maxTxAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_maxWalletToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "approveMax", values: [string]): string;
  encodeFunctionData(functionFragment: "authorize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "autoBuybackEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "autoBuybackMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "buyCooldownEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimDividend",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "clearBuybackMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cooldownEnabled",
    values: [boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cooldownTimerInterval",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCirculatingSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidityBacking",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMultipliedFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getTotalFee",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getUnpaidEarnings",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isAuthorized",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isOverLiquified",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "isOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "launchedAt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "manualSend",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "pair", values?: undefined): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setAutoBuybackSettings",
    values: [boolean, BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setBuybackMultiplierSettings",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDistributionCriteria",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDistributorSettings",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeReceivers",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFees",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsDividendExempt",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsFeeExempt",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsTimelockExempt",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsTxLimitExempt",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxWalletPercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSwapBackSettings",
    values: [boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTargetLiquidity",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTxLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tradingOpen",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tradingStatus",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "triggerManualBuyback",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(functionFragment: "unauthorize", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "_maxTxAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_maxWalletToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approveMax", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "authorize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "autoBuybackEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "autoBuybackMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyCooldownEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimDividend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "clearBuybackMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cooldownEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cooldownTimerInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCirculatingSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidityBacking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMultipliedFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTotalFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnpaidEarnings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAuthorized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isOverLiquified",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "launchedAt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "manualSend", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pair", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAutoBuybackSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBuybackMultiplierSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDistributionCriteria",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDistributorSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeReceivers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setIsDividendExempt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsFeeExempt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsTimelockExempt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsTxLimitExempt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxWalletPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSwapBackSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTargetLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setTxLimit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tradingOpen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tradingStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "triggerManualBuyback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unauthorize",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "AutoLiquify(uint256,uint256)": EventFragment;
    "BuybackMultiplierActive(uint256)": EventFragment;
    "OwnershipTransferred(address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AutoLiquify"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BuybackMultiplierActive"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  { owner: string; spender: string; value: BigNumber }
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export type AutoLiquifyEvent = TypedEvent<
  [BigNumber, BigNumber],
  { amountBNB: BigNumber; amountBOG: BigNumber }
>;

export type AutoLiquifyEventFilter = TypedEventFilter<AutoLiquifyEvent>;

export type BuybackMultiplierActiveEvent = TypedEvent<
  [BigNumber],
  { duration: BigNumber }
>;

export type BuybackMultiplierActiveEventFilter =
  TypedEventFilter<BuybackMultiplierActiveEvent>;

export type OwnershipTransferredEvent = TypedEvent<[string], { owner: string }>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  { from: string; to: string; value: BigNumber }
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface TBTCS extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TBTCSInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _maxTxAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    _maxWalletToken(overrides?: CallOverrides): Promise<[BigNumber]>;

    allowance(
      holder: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approveMax(
      spender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    authorize(
      adr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    autoBuybackEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    autoBuybackMultiplier(overrides?: CallOverrides): Promise<[boolean]>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    buyCooldownEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    claimDividend(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    clearBuybackMultiplier(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cooldownEnabled(
      _status: boolean,
      _interval: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cooldownTimerInterval(overrides?: CallOverrides): Promise<[number]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    getCirculatingSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    getLiquidityBacking(
      accuracy: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMultipliedFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    getOwner(overrides?: CallOverrides): Promise<[string]>;

    getTotalFee(
      selling: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUnpaidEarnings(
      shareholder: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isAuthorized(adr: string, overrides?: CallOverrides): Promise<[boolean]>;

    isOverLiquified(
      target: BigNumberish,
      accuracy: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isOwner(account: string, overrides?: CallOverrides): Promise<[boolean]>;

    launchedAt(overrides?: CallOverrides): Promise<[BigNumber]>;

    manualSend(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    pair(overrides?: CallOverrides): Promise<[string]>;

    router(overrides?: CallOverrides): Promise<[string]>;

    setAutoBuybackSettings(
      _enabled: boolean,
      _cap: BigNumberish,
      _amount: BigNumberish,
      _period: BigNumberish,
      _autoBuybackMultiplier: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBuybackMultiplierSettings(
      numerator: BigNumberish,
      denominator: BigNumberish,
      length: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDistributionCriteria(
      _minPeriod: BigNumberish,
      _minDistribution: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDistributorSettings(
      gas: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeReceivers(
      _developmentReceiver: string,
      _marketingFeeReceiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFees(
      _liquidityFee: BigNumberish,
      _buybackFee: BigNumberish,
      _reflectionFee: BigNumberish,
      _marketingdevelopmentFee: BigNumberish,
      _feeDenominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setIsDividendExempt(
      holder: string,
      exempt: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setIsFeeExempt(
      holder: string,
      exempt: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setIsTimelockExempt(
      holder: string,
      exempt: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setIsTxLimitExempt(
      holder: string,
      exempt: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxWalletPercent(
      maxWallPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSwapBackSettings(
      _enabled: boolean,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTargetLiquidity(
      _target: BigNumberish,
      _denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTxLimit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    swapThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    tradingOpen(overrides?: CallOverrides): Promise<[boolean]>;

    tradingStatus(
      _status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      adr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    triggerManualBuyback(
      amount: BigNumberish,
      triggerBuybackMultiplier: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unauthorize(
      adr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  _maxTxAmount(overrides?: CallOverrides): Promise<BigNumber>;

  _maxWalletToken(overrides?: CallOverrides): Promise<BigNumber>;

  allowance(
    holder: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approveMax(
    spender: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  authorize(
    adr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  autoBuybackEnabled(overrides?: CallOverrides): Promise<boolean>;

  autoBuybackMultiplier(overrides?: CallOverrides): Promise<boolean>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  buyCooldownEnabled(overrides?: CallOverrides): Promise<boolean>;

  claimDividend(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  clearBuybackMultiplier(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cooldownEnabled(
    _status: boolean,
    _interval: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cooldownTimerInterval(overrides?: CallOverrides): Promise<number>;

  decimals(overrides?: CallOverrides): Promise<number>;

  getCirculatingSupply(overrides?: CallOverrides): Promise<BigNumber>;

  getLiquidityBacking(
    accuracy: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMultipliedFee(overrides?: CallOverrides): Promise<BigNumber>;

  getOwner(overrides?: CallOverrides): Promise<string>;

  getTotalFee(selling: boolean, overrides?: CallOverrides): Promise<BigNumber>;

  getUnpaidEarnings(
    shareholder: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isAuthorized(adr: string, overrides?: CallOverrides): Promise<boolean>;

  isOverLiquified(
    target: BigNumberish,
    accuracy: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isOwner(account: string, overrides?: CallOverrides): Promise<boolean>;

  launchedAt(overrides?: CallOverrides): Promise<BigNumber>;

  manualSend(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  pair(overrides?: CallOverrides): Promise<string>;

  router(overrides?: CallOverrides): Promise<string>;

  setAutoBuybackSettings(
    _enabled: boolean,
    _cap: BigNumberish,
    _amount: BigNumberish,
    _period: BigNumberish,
    _autoBuybackMultiplier: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBuybackMultiplierSettings(
    numerator: BigNumberish,
    denominator: BigNumberish,
    length: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDistributionCriteria(
    _minPeriod: BigNumberish,
    _minDistribution: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDistributorSettings(
    gas: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeReceivers(
    _developmentReceiver: string,
    _marketingFeeReceiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFees(
    _liquidityFee: BigNumberish,
    _buybackFee: BigNumberish,
    _reflectionFee: BigNumberish,
    _marketingdevelopmentFee: BigNumberish,
    _feeDenominator: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setIsDividendExempt(
    holder: string,
    exempt: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setIsFeeExempt(
    holder: string,
    exempt: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setIsTimelockExempt(
    holder: string,
    exempt: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setIsTxLimitExempt(
    holder: string,
    exempt: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxWalletPercent(
    maxWallPercent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSwapBackSettings(
    _enabled: boolean,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTargetLiquidity(
    _target: BigNumberish,
    _denominator: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTxLimit(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapEnabled(overrides?: CallOverrides): Promise<boolean>;

  swapThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  tradingOpen(overrides?: CallOverrides): Promise<boolean>;

  tradingStatus(
    _status: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    adr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  triggerManualBuyback(
    amount: BigNumberish,
    triggerBuybackMultiplier: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unauthorize(
    adr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _maxTxAmount(overrides?: CallOverrides): Promise<BigNumber>;

    _maxWalletToken(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      holder: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    approveMax(spender: string, overrides?: CallOverrides): Promise<boolean>;

    authorize(adr: string, overrides?: CallOverrides): Promise<void>;

    autoBuybackEnabled(overrides?: CallOverrides): Promise<boolean>;

    autoBuybackMultiplier(overrides?: CallOverrides): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    buyCooldownEnabled(overrides?: CallOverrides): Promise<boolean>;

    claimDividend(overrides?: CallOverrides): Promise<void>;

    clearBuybackMultiplier(overrides?: CallOverrides): Promise<void>;

    cooldownEnabled(
      _status: boolean,
      _interval: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cooldownTimerInterval(overrides?: CallOverrides): Promise<number>;

    decimals(overrides?: CallOverrides): Promise<number>;

    getCirculatingSupply(overrides?: CallOverrides): Promise<BigNumber>;

    getLiquidityBacking(
      accuracy: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMultipliedFee(overrides?: CallOverrides): Promise<BigNumber>;

    getOwner(overrides?: CallOverrides): Promise<string>;

    getTotalFee(
      selling: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUnpaidEarnings(
      shareholder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAuthorized(adr: string, overrides?: CallOverrides): Promise<boolean>;

    isOverLiquified(
      target: BigNumberish,
      accuracy: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isOwner(account: string, overrides?: CallOverrides): Promise<boolean>;

    launchedAt(overrides?: CallOverrides): Promise<BigNumber>;

    manualSend(overrides?: CallOverrides): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    pair(overrides?: CallOverrides): Promise<string>;

    router(overrides?: CallOverrides): Promise<string>;

    setAutoBuybackSettings(
      _enabled: boolean,
      _cap: BigNumberish,
      _amount: BigNumberish,
      _period: BigNumberish,
      _autoBuybackMultiplier: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setBuybackMultiplierSettings(
      numerator: BigNumberish,
      denominator: BigNumberish,
      length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setDistributionCriteria(
      _minPeriod: BigNumberish,
      _minDistribution: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setDistributorSettings(
      gas: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeReceivers(
      _developmentReceiver: string,
      _marketingFeeReceiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setFees(
      _liquidityFee: BigNumberish,
      _buybackFee: BigNumberish,
      _reflectionFee: BigNumberish,
      _marketingdevelopmentFee: BigNumberish,
      _feeDenominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setIsDividendExempt(
      holder: string,
      exempt: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setIsFeeExempt(
      holder: string,
      exempt: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setIsTimelockExempt(
      holder: string,
      exempt: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setIsTxLimitExempt(
      holder: string,
      exempt: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxWalletPercent(
      maxWallPercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSwapBackSettings(
      _enabled: boolean,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTargetLiquidity(
      _target: BigNumberish,
      _denominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTxLimit(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    swapEnabled(overrides?: CallOverrides): Promise<boolean>;

    swapThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    tradingOpen(overrides?: CallOverrides): Promise<boolean>;

    tradingStatus(_status: boolean, overrides?: CallOverrides): Promise<void>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(adr: string, overrides?: CallOverrides): Promise<void>;

    triggerManualBuyback(
      amount: BigNumberish,
      triggerBuybackMultiplier: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    unauthorize(adr: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;

    "AutoLiquify(uint256,uint256)"(
      amountBNB?: null,
      amountBOG?: null
    ): AutoLiquifyEventFilter;
    AutoLiquify(amountBNB?: null, amountBOG?: null): AutoLiquifyEventFilter;

    "BuybackMultiplierActive(uint256)"(
      duration?: null
    ): BuybackMultiplierActiveEventFilter;
    BuybackMultiplierActive(
      duration?: null
    ): BuybackMultiplierActiveEventFilter;

    "OwnershipTransferred(address)"(
      owner?: null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(owner?: null): OwnershipTransferredEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
  };

  estimateGas: {
    _maxTxAmount(overrides?: CallOverrides): Promise<BigNumber>;

    _maxWalletToken(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      holder: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approveMax(
      spender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    authorize(
      adr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    autoBuybackEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    autoBuybackMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    buyCooldownEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    claimDividend(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    clearBuybackMultiplier(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cooldownEnabled(
      _status: boolean,
      _interval: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cooldownTimerInterval(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    getCirculatingSupply(overrides?: CallOverrides): Promise<BigNumber>;

    getLiquidityBacking(
      accuracy: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMultipliedFee(overrides?: CallOverrides): Promise<BigNumber>;

    getOwner(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalFee(
      selling: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUnpaidEarnings(
      shareholder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAuthorized(adr: string, overrides?: CallOverrides): Promise<BigNumber>;

    isOverLiquified(
      target: BigNumberish,
      accuracy: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOwner(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    launchedAt(overrides?: CallOverrides): Promise<BigNumber>;

    manualSend(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    pair(overrides?: CallOverrides): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<BigNumber>;

    setAutoBuybackSettings(
      _enabled: boolean,
      _cap: BigNumberish,
      _amount: BigNumberish,
      _period: BigNumberish,
      _autoBuybackMultiplier: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBuybackMultiplierSettings(
      numerator: BigNumberish,
      denominator: BigNumberish,
      length: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDistributionCriteria(
      _minPeriod: BigNumberish,
      _minDistribution: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDistributorSettings(
      gas: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeReceivers(
      _developmentReceiver: string,
      _marketingFeeReceiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFees(
      _liquidityFee: BigNumberish,
      _buybackFee: BigNumberish,
      _reflectionFee: BigNumberish,
      _marketingdevelopmentFee: BigNumberish,
      _feeDenominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setIsDividendExempt(
      holder: string,
      exempt: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setIsFeeExempt(
      holder: string,
      exempt: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setIsTimelockExempt(
      holder: string,
      exempt: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setIsTxLimitExempt(
      holder: string,
      exempt: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxWalletPercent(
      maxWallPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSwapBackSettings(
      _enabled: boolean,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTargetLiquidity(
      _target: BigNumberish,
      _denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTxLimit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    swapThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    tradingOpen(overrides?: CallOverrides): Promise<BigNumber>;

    tradingStatus(
      _status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      adr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    triggerManualBuyback(
      amount: BigNumberish,
      triggerBuybackMultiplier: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unauthorize(
      adr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _maxTxAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _maxWalletToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(
      holder: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approveMax(
      spender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    authorize(
      adr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    autoBuybackEnabled(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    autoBuybackMultiplier(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyCooldownEnabled(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimDividend(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    clearBuybackMultiplier(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cooldownEnabled(
      _status: boolean,
      _interval: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cooldownTimerInterval(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCirculatingSupply(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLiquidityBacking(
      accuracy: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMultipliedFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalFee(
      selling: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUnpaidEarnings(
      shareholder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAuthorized(
      adr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOverLiquified(
      target: BigNumberish,
      accuracy: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOwner(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    launchedAt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    manualSend(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pair(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAutoBuybackSettings(
      _enabled: boolean,
      _cap: BigNumberish,
      _amount: BigNumberish,
      _period: BigNumberish,
      _autoBuybackMultiplier: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBuybackMultiplierSettings(
      numerator: BigNumberish,
      denominator: BigNumberish,
      length: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDistributionCriteria(
      _minPeriod: BigNumberish,
      _minDistribution: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDistributorSettings(
      gas: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeReceivers(
      _developmentReceiver: string,
      _marketingFeeReceiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFees(
      _liquidityFee: BigNumberish,
      _buybackFee: BigNumberish,
      _reflectionFee: BigNumberish,
      _marketingdevelopmentFee: BigNumberish,
      _feeDenominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setIsDividendExempt(
      holder: string,
      exempt: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setIsFeeExempt(
      holder: string,
      exempt: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setIsTimelockExempt(
      holder: string,
      exempt: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setIsTxLimitExempt(
      holder: string,
      exempt: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxWalletPercent(
      maxWallPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSwapBackSettings(
      _enabled: boolean,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTargetLiquidity(
      _target: BigNumberish,
      _denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTxLimit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swapThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tradingOpen(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tradingStatus(
      _status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      adr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    triggerManualBuyback(
      amount: BigNumberish,
      triggerBuybackMultiplier: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unauthorize(
      adr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
