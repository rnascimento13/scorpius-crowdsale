/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import * as Contracts from ".";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";
import { ethers } from "ethers";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "Box",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Box__factory>;
    getContractFactory(
      name: "BoxV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BoxV2__factory>;
    getContractFactory(
      name: "Greeter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Greeter__factory>;
    getContractFactory(
      name: "ITManToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITManToken__factory>;
    getContractFactory(
      name: "ITManTokenCrowdsale",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITManTokenCrowdsale__factory>;
    getContractFactory(
      name: "AllowanceCrowdsale",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AllowanceCrowdsale__factory>;
    getContractFactory(
      name: "CappedCrowdsale",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CappedCrowdsale__factory>;
    getContractFactory(
      name: "Crowdsale",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Crowdsale__factory>;
    getContractFactory(
      name: "TimedCrowdsale",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TimedCrowdsale__factory>;
    getContractFactory(
      name: "Auth",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Auth__factory>;
    getContractFactory(
      name: "DividendDistributor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DividendDistributor__factory>;
    getContractFactory(
      name: "IBEP20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBEP20__factory>;
    getContractFactory(
      name: "IDEXFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDEXFactory__factory>;
    getContractFactory(
      name: "IDEXRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDEXRouter__factory>;
    getContractFactory(
      name: "IDividendDistributor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDividendDistributor__factory>;
    getContractFactory(
      name: "TBTCS",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TBTCS__factory>;

    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "Box",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Box>;
    getContractAt(
      name: "BoxV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BoxV2>;
    getContractAt(
      name: "Greeter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Greeter>;
    getContractAt(
      name: "ITManToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITManToken>;
    getContractAt(
      name: "ITManTokenCrowdsale",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITManTokenCrowdsale>;
    getContractAt(
      name: "AllowanceCrowdsale",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AllowanceCrowdsale>;
    getContractAt(
      name: "CappedCrowdsale",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CappedCrowdsale>;
    getContractAt(
      name: "Crowdsale",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Crowdsale>;
    getContractAt(
      name: "TimedCrowdsale",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TimedCrowdsale>;
    getContractAt(
      name: "Auth",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Auth>;
    getContractAt(
      name: "DividendDistributor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DividendDistributor>;
    getContractAt(
      name: "IBEP20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBEP20>;
    getContractAt(
      name: "IDEXFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDEXFactory>;
    getContractAt(
      name: "IDEXRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDEXRouter>;
    getContractAt(
      name: "IDividendDistributor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDividendDistributor>;
    getContractAt(
      name: "TBTCS",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TBTCS>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
