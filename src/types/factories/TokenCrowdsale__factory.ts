/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Signer,
  utils,
  BigNumberish,
  Contract,
  ContractFactory,
  Overrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TokenCrowdsale,
  TokenCrowdsaleInterface,
} from "../TokenCrowdsale";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_rate",
        type: "uint256",
      },
      {
        internalType: "address payable",
        name: "_wallet",
        type: "address",
      },
      {
        internalType: "contract ERC20",
        name: "_token",
        type: "address",
      },
      {
        internalType: "address",
        name: "_tokenWallet",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_openingTime",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_closingTime",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "prevClosingTime",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "newClosingTime",
        type: "uint256",
      },
    ],
    name: "TimedCrowdsaleExtended",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "purchaser",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "beneficiary",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "TokensPurchased",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "beneficiary",
        type: "address",
      },
    ],
    name: "buyTokens",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "cap",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "capReached",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "closingTime",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "contributions",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "crowdCap",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "hasClosed",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "investorHardCap",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "investorMinCap",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "isOpen",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "openingTime",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "remainingTokens",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenWallet",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "wallet",
    outputs: [
      {
        internalType: "address payable",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "weiRaised",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x608060405266b1a2bc2ec50000600955673782dace9d900000600a55681043561a8829300000600b553480156200003557600080fd5b50604051620011303803806200113083398101604081905262000058916200039d565b600b54600160005582828589898982620000b95760405162461bcd60e51b815260206004820152601460248201527f43726f776473616c653a2072617465206973203000000000000000000000000060448201526064015b60405180910390fd5b6001600160a01b0382166200011f5760405162461bcd60e51b815260206004820152602560248201527f43726f776473616c653a2077616c6c657420697320746865207a65726f206164604482015264647265737360d81b6064820152608401620000b0565b6001600160a01b038116620001835760405162461bcd60e51b8152602060048201526024808201527f43726f776473616c653a20746f6b656e20697320746865207a65726f206164646044820152637265737360e01b6064820152608401620000b0565b600392909255600280546001600160a01b03199081166001600160a01b0393841617909155600180549091169282169290921790915581166200022f5760405162461bcd60e51b815260206004820152603460248201527f416c6c6f77616e636543726f776473616c653a20746f6b656e2077616c6c657460448201527f20697320746865207a65726f20616464726573730000000000000000000000006064820152608401620000b0565b600580546001600160a01b0319166001600160a01b039290921691909117905542821015620002b65760405162461bcd60e51b815260206004820152603360248201526000805160206200111083398151915260448201527f6265666f72652063757272656e742074696d65000000000000000000000000006064820152608401620000b0565b8181116200031c5760405162461bcd60e51b815260206004820152603760248201526000805160206200111083398151915260448201527f6e6f74206265666f726520636c6f73696e672074696d650000000000000000006064820152608401620000b0565b60069190915560075580620003745760405162461bcd60e51b815260206004820152601960248201527f43617070656443726f776473616c653a206361702069732030000000000000006044820152606401620000b0565b600855506200040d945050505050565b6001600160a01b03811681146200039a57600080fd5b50565b60008060008060008060c08789031215620003b757600080fd5b865195506020870151620003cb8162000384565b6040880151909550620003de8162000384565b6060880151909450620003f18162000384565b809350506080870151915060a087015190509295509295509295565b610cf3806200041d6000396000f3fe6080604052600436106101025760003560e01c8063521eb27311610095578063bf58390311610064578063bf5839031461026c578063bff99c6c14610281578063ec8ac4d81461029f578063ed5db874146102ad578063fc0c546a146102c357600080fd5b8063521eb273146101f9578063543b6cd71461022b578063b25d7f5414610241578063b7a8807c1461025757600080fd5b806342e94c90116100d157806342e94c901461018d57806347535d7b146101ba5780634b6753bc146101cf5780634f935945146101e457600080fd5b80631515bc2b1461011c5780632c4e722e14610144578063355274ea146101635780634042b66f1461017857600080fd5b3661011757610115336102e1565b6102e1565b005b600080fd5b34801561012857600080fd5b5060075442115b60405190151581526020015b60405180910390f35b34801561015057600080fd5b506003545b60405190815260200161013b565b34801561016f57600080fd5b50600854610155565b34801561018457600080fd5b50600454610155565b34801561019957600080fd5b506101556101a8366004610b38565b600c6020526000908152604090205481565b3480156101c657600080fd5b5061012f6103d3565b3480156101db57600080fd5b50600754610155565b3480156101f057600080fd5b5061012f6103ee565b34801561020557600080fd5b506002546001600160a01b03165b6040516001600160a01b03909116815260200161013b565b34801561023757600080fd5b50610155600b5481565b34801561024d57600080fd5b5061015560095481565b34801561026357600080fd5b50600654610155565b34801561027857600080fd5b50610155610403565b34801561028d57600080fd5b506005546001600160a01b0316610213565b610115610110366004610b38565b3480156102b957600080fd5b50610155600a5481565b3480156102cf57600080fd5b506001546001600160a01b0316610213565b600260005414156103395760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b6002600055346103498282610529565b60006103548261055b565b9050816004546103649190610b77565b600455610371838261057f565b60408051838152602081018390526001600160a01b0385169133917f6faf93231a456e552dbc9961f58d9713ee4f2e69d15f1975b050ef0911053a7b910160405180910390a36103c18383610589565b6103c9610698565b5050600160005550565b600060065442101580156103e957506007544211155b905090565b60006008546103fc60045490565b1015905090565b60006103e961041a6001546001600160a01b031690565b6005546040516370a0823160e01b81526001600160a01b0391821660048201529116906370a082319060240160206040518083038186803b15801561045e57600080fd5b505afa158015610472573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104969190610b8f565b6001546001600160a01b0316600554604051636eb1769f60e11b81526001600160a01b03918216600482015230602482015291169063dd62ed3e9060440160206040518083038186803b1580156104ec57600080fd5b505afa158015610500573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105249190610b8f565b6106d4565b6105316103d3565b61054d5760405162461bcd60e51b815260040161033090610ba8565b61055782826106ec565b5050565b6000629896806003548361056f9190610bdf565b6105799190610bfe565b92915050565b610557828261075a565b6105916103d3565b6105ad5760405162461bcd60e51b815260040161033090610ba8565b6001600160a01b0382166000908152600c6020526040812054906105d18284610764565b90506009548110156106255760405162461bcd60e51b815260206004820152601d60248201527f43726f776473616c653a20556e646572204d696e696d756d20436170210000006044820152606401610330565b600a548111156106775760405162461bcd60e51b815260206004820152601c60248201527f43726f776473616c653a204f766572204d6178696d756e2043617021000000006044820152606401610330565b6001600160a01b039093166000908152600c60205260409020929092555050565b6002546040516001600160a01b03909116903480156108fc02916000818181858888f193505050501580156106d1573d6000803e3d6000fd5b50565b60008183106106e357816106e5565b825b9392505050565b6106f68282610770565b60085461070c8261070660045490565b90610764565b11156105575760405162461bcd60e51b815260206004820152601d60248201527f43617070656443726f776473616c653a206361702065786365656465640000006044820152606401610330565b610557828261079e565b60006106e58284610b77565b6107786103d3565b6107945760405162461bcd60e51b815260040161033090610ba8565b61055782826107d3565b600554610557906001600160a01b031683836107c26001546001600160a01b031690565b6001600160a01b0316929190610889565b6001600160a01b03821661083c5760405162461bcd60e51b815260206004820152602a60248201527f43726f776473616c653a2062656e656669636961727920697320746865207a65604482015269726f206164647265737360b01b6064820152608401610330565b806105575760405162461bcd60e51b815260206004820152601960248201527f43726f776473616c653a20776569416d6f756e742069732030000000000000006044820152606401610330565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b1790526108e39085906108e9565b50505050565b600061093e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166109c09092919063ffffffff16565b8051909150156109bb578080602001905181019061095c9190610c20565b6109bb5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610330565b505050565b60606109cf84846000856109d7565b949350505050565b606082471015610a385760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610330565b843b610a865760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610330565b600080866001600160a01b03168587604051610aa29190610c6e565b60006040518083038185875af1925050503d8060008114610adf576040519150601f19603f3d011682016040523d82523d6000602084013e610ae4565b606091505b5091509150610af4828286610aff565b979650505050505050565b60608315610b0e5750816106e5565b825115610b1e5782518084602001fd5b8160405162461bcd60e51b81526004016103309190610c8a565b600060208284031215610b4a57600080fd5b81356001600160a01b03811681146106e557600080fd5b634e487b7160e01b600052601160045260246000fd5b60008219821115610b8a57610b8a610b61565b500190565b600060208284031215610ba157600080fd5b5051919050565b60208082526018908201527f54696d656443726f776473616c653a206e6f74206f70656e0000000000000000604082015260600190565b6000816000190483118215151615610bf957610bf9610b61565b500290565b600082610c1b57634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215610c3257600080fd5b815180151581146106e557600080fd5b60005b83811015610c5d578181015183820152602001610c45565b838111156108e35750506000910152565b60008251610c80818460208701610c42565b9190910192915050565b6020815260008251806020840152610ca9816040850160208701610c42565b601f01601f1916919091016040019291505056fea2646970667358221220427e8b5d6dc088cdc8411f641883c82e3bef19fcdf68c692687fd4e282e6545964736f6c6343000809003354696d656443726f776473616c653a206f70656e696e672074696d6520697320";

type TokenCrowdsaleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TokenCrowdsaleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TokenCrowdsale__factory extends ContractFactory {
  constructor(...args: TokenCrowdsaleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    _rate: BigNumberish,
    _wallet: string,
    _token: string,
    _tokenWallet: string,
    _openingTime: BigNumberish,
    _closingTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TokenCrowdsale> {
    return super.deploy(
      _rate,
      _wallet,
      _token,
      _tokenWallet,
      _openingTime,
      _closingTime,
      overrides || {}
    ) as Promise<TokenCrowdsale>;
  }
  getDeployTransaction(
    _rate: BigNumberish,
    _wallet: string,
    _token: string,
    _tokenWallet: string,
    _openingTime: BigNumberish,
    _closingTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _rate,
      _wallet,
      _token,
      _tokenWallet,
      _openingTime,
      _closingTime,
      overrides || {}
    );
  }
  attach(address: string): TokenCrowdsale {
    return super.attach(address) as TokenCrowdsale;
  }
  connect(signer: Signer): TokenCrowdsale__factory {
    return super.connect(signer) as TokenCrowdsale__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TokenCrowdsaleInterface {
    return new utils.Interface(_abi) as TokenCrowdsaleInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TokenCrowdsale {
    return new Contract(address, _abi, signerOrProvider) as TokenCrowdsale;
  }
}
