/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { TokenSwap, TokenSwapInterface } from "../TokenSwap";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "_tokenIn",
        type: "address",
      },
      {
        internalType: "contract IERC20",
        name: "_tokenOut",
        type: "address",
      },
      {
        internalType: "address",
        name: "_tokenWallet",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "swapper",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amounIn",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountOut",
        type: "uint256",
      },
    ],
    name: "Swap",
    type: "event",
  },
  {
    inputs: [],
    name: "ratioIO",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
    ],
    name: "swap",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenIn",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenInSwapped",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenOut",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenOutRemaining",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenWallet",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405260016000553480156200001657600080fd5b506040516200109e3803806200109e8339810160408190526200003991620002a1565b600180546001600160a01b038086166001600160a01b03199283168117909355600280548683169084161790556003805491851691909216179055604080516318160ddd60e01b8152905163095ea7b391309184916318160ddd916004808301926020929190829003018186803b158015620000b457600080fd5b505afa158015620000c9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000ef9190620002f5565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b1580156200013657600080fd5b505af11580156200014b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200017191906200030f565b50600254604080516318160ddd60e01b815290516001600160a01b039092169163095ea7b391309184916318160ddd916004808301926020929190829003018186803b158015620001c157600080fd5b505afa158015620001d6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001fc9190620002f5565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b1580156200024357600080fd5b505af115801562000258573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200027e91906200030f565b505050506200033a565b6001600160a01b03811681146200029e57600080fd5b50565b600080600060608486031215620002b757600080fd5b8351620002c48162000288565b6020850151909350620002d78162000288565b6040850151909250620002ea8162000288565b809150509250925092565b6000602082840312156200030857600080fd5b5051919050565b6000602082840312156200032257600080fd5b815180151581146200033357600080fd5b9392505050565b610d54806200034a6000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063acb9b0b21161005b578063acb9b0b2146100dc578063bff99c6c146100e5578063d0202d3b146100f8578063db5d00871461010b57600080fd5b80636daf390b1461008257806386a27fe3146100b257806394b918de146100c9575b600080fd5b600154610095906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100bb60005481565b6040519081526020016100a9565b6100bb6100d7366004610b22565b610113565b6100bb60045481565b600354610095906001600160a01b031681565b600254610095906001600160a01b031681565b6100bb610989565b60008082116101625760405162461bcd60e51b8152602060048201526016602482015275616d6f756e74496e2063616e2774206265207a65726f60501b60448201526064015b60405180910390fd5b6001546040516370a0823160e01b815233600482015283916001600160a01b0316906370a082319060240160206040518083038186803b1580156101a557600080fd5b505afa1580156101b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101dd9190610b3b565b10156102205760405162461bcd60e51b81526020600482015260126024820152716e6f20746f6b656e496e2062616c616e636560701b6044820152606401610159565b600061022e83600054610a9d565b90506000600160009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561028057600080fd5b505afa158015610294573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102b89190610b54565b60ff1690506000600260009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561030d57600080fd5b505afa158015610321573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103459190610b54565b60ff169050600081831161048357600160009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156103a157600080fd5b505afa1580156103b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d99190610b54565b600260009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561042757600080fd5b505afa15801561043b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045f9190610b54565b6104699190610b8d565b61047490600a610c94565b61047e9085610ca3565b6105ae565b600260009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156104d157600080fd5b505afa1580156104e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105099190610b54565b600160009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561055757600080fd5b505afa15801561056b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058f9190610b54565b6105999190610b8d565b6105a490600a610c94565b6105ae9085610cc2565b9050600081116106005760405162461bcd60e51b815260206004820152601960248201527f6d7573742062652067726561746572207468656e207a65726f000000000000006044820152606401610159565b6002546003546040516370a0823160e01b81526001600160a01b039182166004820152839291909116906370a082319060240160206040518083038186803b15801561064b57600080fd5b505afa15801561065f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106839190610b3b565b116106c25760405162461bcd60e51b815260206004820152600f60248201526e1bdd5d081bd9881d1bdad95b93dd5d608a1b6044820152606401610159565b600154604051636eb1769f60e11b815233600482015230602482015287916001600160a01b03169063dd62ed3e9060440160206040518083038186803b15801561070b57600080fd5b505afa15801561071f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107439190610b3b565b10156107915760405162461bcd60e51b815260206004820152601860248201527f455243323020616c6c6f77616e636520746f6f206c6f772100000000000000006044820152606401610159565b6001546003546040516323b872dd60e01b81523360048201526001600160a01b039182166024820152604481018990529116906323b872dd90606401602060405180830381600087803b1580156107e757600080fd5b505af11580156107fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081f9190610ce4565b5060025460405163095ea7b360e01b8152336004820152602481018390526001600160a01b039091169063095ea7b390604401602060405180830381600087803b15801561086c57600080fd5b505af1158015610880573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a49190610ce4565b506002546003546040516323b872dd60e01b81526001600160a01b039182166004820152336024820152604481018490529116906323b872dd90606401602060405180830381600087803b1580156108fb57600080fd5b505af115801561090f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109339190610ce4565b50856004546109429190610d06565b600455604080518781526020810183905233917f77f92a1b6a1a11de8ca49515ad4c1fad45632dd3442167d74b90b304a3c7a758910160405180910390a295945050505050565b6002546003546040516370a0823160e01b81526001600160a01b039182166004820152600092610a989216906370a082319060240160206040518083038186803b1580156109d657600080fd5b505afa1580156109ea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a0e9190610b3b565b600254600354604051636eb1769f60e11b81526001600160a01b03918216600482015230602482015291169063dd62ed3e9060440160206040518083038186803b158015610a5b57600080fd5b505afa158015610a6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a939190610b3b565b610b0a565b905090565b6000811580610ac157508282610ab38183610ca3565b9250610abf9083610cc2565b145b610b045760405162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6d756c2d6f766572666c6f7760601b6044820152606401610159565b92915050565b6000818310610b195781610b1b565b825b9392505050565b600060208284031215610b3457600080fd5b5035919050565b600060208284031215610b4d57600080fd5b5051919050565b600060208284031215610b6657600080fd5b815160ff81168114610b1b57600080fd5b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff841680821015610ba757610ba7610b77565b90039392505050565b600181815b80851115610beb578160001904821115610bd157610bd1610b77565b80851615610bde57918102915b93841c9390800290610bb5565b509250929050565b600082610c0257506001610b04565b81610c0f57506000610b04565b8160018114610c255760028114610c2f57610c4b565b6001915050610b04565b60ff841115610c4057610c40610b77565b50506001821b610b04565b5060208310610133831016604e8410600b8410161715610c6e575081810a610b04565b610c788383610bb0565b8060001904821115610c8c57610c8c610b77565b029392505050565b6000610b1b60ff841683610bf3565b6000816000190483118215151615610cbd57610cbd610b77565b500290565b600082610cdf57634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215610cf657600080fd5b81518015158114610b1b57600080fd5b60008219821115610d1957610d19610b77565b50019056fea2646970667358221220865751443035b225febf8afa0b96160ca5441def8f3b02c742bd51ef12b3f40c64736f6c63430008090033";

type TokenSwapConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TokenSwapConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TokenSwap__factory extends ContractFactory {
  constructor(...args: TokenSwapConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    _tokenIn: string,
    _tokenOut: string,
    _tokenWallet: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TokenSwap> {
    return super.deploy(
      _tokenIn,
      _tokenOut,
      _tokenWallet,
      overrides || {}
    ) as Promise<TokenSwap>;
  }
  getDeployTransaction(
    _tokenIn: string,
    _tokenOut: string,
    _tokenWallet: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _tokenIn,
      _tokenOut,
      _tokenWallet,
      overrides || {}
    );
  }
  attach(address: string): TokenSwap {
    return super.attach(address) as TokenSwap;
  }
  connect(signer: Signer): TokenSwap__factory {
    return super.connect(signer) as TokenSwap__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TokenSwapInterface {
    return new utils.Interface(_abi) as TokenSwapInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TokenSwap {
    return new Contract(address, _abi, signerOrProvider) as TokenSwap;
  }
}
